class Node:
    def __init__(self, info): 
        self.info = info  
        self.left = None  
        self.right = None 
        self.level = None 

    def __str__(self):
        return str(self.info) 

class BinarySearchTree:
    def __init__(self): 
        self.root = None

    def create(self, val):  
        if self.root == None:
            self.root = Node(val)
        else:
            current = self.root
         
            while True:
                if val < current.info:
                    if current.left:
                        current = current.left
                    else:
                        current.left = Node(val)
                        break
                elif val > current.info:
                    if current.right:
                        current = current.right
                    else:
                        current.right = Node(val)
                        break
                else:
                    break



def max_depth(node):
    if node is None:
        return 0

    # compute height of left child
    lHeight = max_depth(node.left)
    # compute height of right child
    rHeight = max_depth(node.right)

    if(lHeight > rHeight):
        return lHeight+1
    else:
        return rHeight+1

def height(root):
    return max_depth(root) - 1



tree = BinarySearchTree()
t = 5
arr = [3, 1, 7, 5, 4]

for i in range(t):
    tree.create(arr[i])
print(height(tree.root))
